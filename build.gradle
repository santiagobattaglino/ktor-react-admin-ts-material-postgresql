plugins {
    id 'java'
    id 'application'
    id 'jacoco'
    id 'com.github.johnrengelman.shadow' version '4.0.1'
    id 'org.jetbrains.kotlin.jvm' version '1.3.61'
    //id 'com.github.johnrengelman.shadow' version '7.0.0'
    //id 'org.jetbrains.kotlin.jvm' version '1.5.20-M1'
}

repositories {
    mavenLocal()
    jcenter()
    maven { url "https://dl.bintray.com/kotlin/ktor" }
    maven { url 'https://jitpack.io' }
    maven { url "https://dl.bintray.com/spekframework/spek-dev" }
}

// Application entry point. This will run ktor and ktor will run our application
// based on /resources/application.conf settings
mainClassName = "io.ktor.server.netty.DevelopmentEngine"

configurations {
    ktlint
}

sourceCompatibility = 1.8

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

group 'jdbcat.examples'
version '1.0-SNAPSHOT'

dependencies {
    //implementation project(':jdbcat-core')
    //implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    //implementation "com.github.mobiletoly:jdbcat:master-SNAPSHOT"
    implementation group: "com.github.mobiletoly", name: "jdbcat-core", version: "master-SNAPSHOT", changing: true

    implementation "io.ktor:ktor-server-netty:$ktor_version"
    implementation "io.ktor:ktor-jackson:$ktor_version"
    implementation "org.koin:koin-ktor:$koin_version"
    implementation "org.koin:koin-logger-slf4j:$koin_version"
    implementation 'org.koin:koin-ktor:$koin_version'
    implementation "com.zaxxer:HikariCP:$hikaricp_version"
    implementation "io.github.microutils:kotlin-logging:$mu_logging_version"
    implementation "ch.qos.logback:logback-classic:$logback_version"
    implementation "org.postgresql:postgresql:$postgres_driver_version"
    implementation "io.ktor:ktor-auth:$ktor_version"

    // HTML
    implementation "io.ktor:ktor-html-builder:$ktor_version"

    // Client
    implementation "io.ktor:ktor-client-core:$ktor_version"
    implementation "io.ktor:ktor-client-cio:$ktor_version"
    implementation "io.ktor:ktor-client-apache:$ktor_version"
    implementation "io.ktor:ktor-client-gson:$ktor_version"
    implementation "io.ktor:ktor-client-logging:$ktor_version"

    testImplementation("io.ktor:ktor-server-test-host:$ktor_version")
    testImplementation("org.testcontainers:postgresql:$testcontainers_version")
    testImplementation("org.amshove.kluent:kluent:$kluent_version")

    testImplementation('org.junit.jupiter:junit-jupiter-api:5.2.0')
    testImplementation('org.junit.jupiter:junit-jupiter-engine:5.2.0')
    testImplementation ("org.spekframework.spek2:spek-dsl-jvm:$spek_version")  {
        exclude group: 'org.jetbrains.kotlin'
    }
    testRuntimeOnly ("org.spekframework.spek2:spek-runner-junit5:$spek_version") {
        exclude group: 'org.junit.platform'
        exclude group: 'org.jetbrains.kotlin'
    }

    ktlint "com.pinterest:ktlint:0.41.0"
}

// --- Run "./gradle shadowJar" to generate fat jar with all dependencies
shadowJar {
    baseName = 'jdbcat-ktor-backend'
    classifier = null
    version = null
}

// --- ktlint configuration --
task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style"
    classpath = configurations.ktlint
    main = "com.pinterest.ktlint.Main"
    args = ["src/**/*.kt"]
    // to generate report in checkstyle format prepend following args:
    // "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
    // see https://github.com/shyiko/ktlint#usage for more
}
task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    classpath = configurations.ktlint
    main = "com.pinterest.ktlint.Main"
    args = ["-F", "src/**/*.kt"]
}
check.dependsOn ktlint

test {
    useJUnitPlatform {
        includeEngines 'spek2'
    }
    dependsOn 'cleanTest'
    // Show test results.
    testLogging {
        events "passed", "skipped", "failed"
    }
}

jacoco {
    toolVersion = "0.8.2"
    reportsDir = file("$buildDir/jacoco") // Jacoco's output root.
}

test.finalizedBy(jacocoTestReport)
